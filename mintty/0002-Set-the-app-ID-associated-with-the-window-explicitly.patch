From 65583bd8518ed25ba7962c7eeb04383297cafc19 Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Sat, 15 Aug 2015 10:34:41 +0000
Subject: [PATCH 2/3] Set the app ID associated with the window explicitly

When calling mintty from another process and painstakingly configuring
the app ID to be identical between the caller and the callee, at least
on this developer's machine clicking the icon pinned to the taskbar
*still* launched mintty directly, not the caller.

However, if we set the app ID explicitly in the window's property store
(in addition to setting the current process' app ID), clicking a pinned
icon of an executable that called mintty will actually launch that
executable, as obviously intended. So let's set the app ID of the mintty
window explicitly.

We now need to declare the minimum Windows version to be Windows 7 so we
get the necessary data structures, but we take pains to make sure that
`mintty` will still run on previous Windows versions by repeating the
`LoadLibrary()`/`GetProcAddress()` dance that we already perform when
calling `SetCurrentProcessExplicitAppUserModelID()`.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 src/std.h     |  2 +-
 src/winmain.c | 36 ++++++++++++++++++++++++++++++++++++
 2 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/src/std.h b/src/std.h
index 3a894cd..0095a64 100644
--- a/src/std.h
+++ b/src/std.h
@@ -41,7 +41,7 @@ int vasprintf(char **, const char *, va_list);
 
 char *asform(const char *fmt, ...);
 
-#define WINVER 0x500  // Windows 2000
+#define WINVER 0x601  // Windows 7
 #define _WIN32_WINNT WINVER
 #define _WIN32_IE WINVER
 
diff --git a/src/winmain.c b/src/winmain.c
index 1e68dcf..a5c31b5 100644
--- a/src/winmain.c
+++ b/src/winmain.c
@@ -16,6 +16,10 @@
 #include <shellapi.h>
 
 #include <sys/cygwin.h>
+#if WINVER >= 0x601
+#include <propsys.h>
+#include <propkey.h>
+#endif
 
 HINSTANCE inst;
 HWND wnd;
@@ -1020,6 +1024,38 @@ main(int argc, char *argv[])
                         cfg.x, cfg.y, width, height,
                         null, null, inst, null);
 
+#if WINVER >= 0x601
+  // Set the app ID explicitly
+  if (*cfg.app_id) {
+    HMODULE shell = load_sys_library("shell32.dll");
+    HRESULT (WINAPI *pGetPropertyStore)(HWND hwnd, REFIID riid, void **ppv) =
+      (void *)GetProcAddress(shell, "SHGetPropertyStoreForWindow");
+
+    if (pGetPropertyStore) {
+      size_t size;
+      IPropertyStore *pps;
+      HRESULT hr;
+      PROPVARIANT var;
+
+      hr = pGetPropertyStore(wnd, &IID_IPropertyStore, (void **) &pps);
+      if (SUCCEEDED(hr)) {
+        if (*cfg.app_id &&
+            (size = cs_mbstowcs(0, cfg.app_id, 0) + 1)) {
+          var.pwszVal = malloc(size * sizeof(wchar));
+          if (var.pwszVal) {
+            cs_mbstowcs(var.pwszVal, cfg.app_id, size);
+            var.vt = VT_LPWSTR;
+            pps->lpVtbl->SetValue(pps,
+                &PKEY_AppUserModel_ID, &var);
+          }
+        }
+        pps->lpVtbl->Commit(pps);
+        pps->lpVtbl->Release(pps);
+      }
+    }
+  }
+#endif
+
   // The input method context.
   imc = ImmGetContext(wnd);
 
-- 
2.5.0

